{"dependencies":{"npm":{"d3":"3.x.x","dagre-d3":"0.x.x","websocket":"1.x.x"}},"nodeDefinitions":{"https://serve-chix.rhcloud.com/nodes/{ns}/{name}":{"d3":{"dagre":{"_id":"5490d0b00e9c46154a015c8d","name":"dagre","ns":"d3","async":true,"description":"Dagre D3","phrases":{"active":"Greating dagre-d3 graph"},"dependencies":{"npm":{"d3":"3.x.x","dagre-d3":"0.x.x"}},"ports":{"input":{"element":{"title":"Element","type":"HTMLElement"},"options":{"title":"Options","type":"object","properties":{"nodesep":{"type":"number","default":70},"ranksep":{"type":"number","default":50},"rankdir":{"type":"string","enum":["LR","TB"],"default":"TB"},"marginx":{"type":"number","default":20},"marginy":{"type":"number","default":20}}},"setNode":{"title":"Add Node","type":"object","async":true,"properties":{"id":{"type":["number","string"]},"name":{"type":"string"},"title":{"type":"string"}}},"removeNode":{"title":"Remove Node","type":"object","async":true,"properties":{"id":{"type":["number","string"]},"pid":{"type":["number","string"]},"anyOf":[{"required":["id"]},{"required":["pid"]}]}},"removeEdge":{"title":"Remove Edge","type":"object","async":true,"properties":{"id":{"type":["number","string"]},"pid":{"type":["number","string"]},"anyOf":[{"required":["id"]},{"required":["pid"]}]}},"setEdge":{"title":"Set Edge","type":"object","async":true,"properties":{"source":{"title":"Source","type":"object","properties":{"id":{"type":["string","number"]},"port":{"type":["string"]}}},"target":{"title":"Target","type":"object","properties":{"id":{"type":["string","number"]},"port":{"type":["string"]}}}}}},"output":{}},"fn":"state.zoom = d3.behavior.zoom().on('zoom', function() {\n  state.inner.attr('transform', 'translate(' + d3.event.translate + ')' +\n    'scale(' + d3.event.scale + ')');\n});\n\nstate.scaleToFit = function(isUpdate) {\n\n // Zoom and scale to fit\n var zoomScale = state.zoom.scale();\n var graphWidth = state.g.graph().width + 80;\n var graphHeight = state.g.graph().height + 40;\n var width = parseInt(state.svg.style('width').replace(/px/, ''));\n var height = parseInt(state.svg.style('height').replace(/px/, ''));\n zoomScale = Math.min(width / graphWidth, height / graphHeight);\n\n var translate = [(width/2) - ((graphWidth*zoomScale)/2), (height/2) - ((graphHeight*zoomScale)/2)];\n state.zoom.translate(translate);\n state.zoom.scale(zoomScale);\n state.zoom.event(isUpdate ? state.svg.transition().duration(500) : d3.select(\"svg\"));\n\n};\n\non.input.start = function() {\n  state.svg.call(state.zoom);\n};\n\n// parent html element\non.input.element = function(data) {\n  // re-init entire graph.\n  var s = document.createElement('svg');\n  state.g = document.createElement('g');\n  s.appendChild(state.g);\n  data.appendChild(s);\n  var svg = d3.select(s);\n  state.inner = svg.select(state.g);\n\n  state.render = new dagreD3.render();\n  state.graph = new dagreD3.graphlib.Graph();\n  state.graph.setGraph(input.options);\n};\n\n// could `stream` the nodes through\n// but would be weird I guess. instead of listening you\n// will feed the new status each and every time.\non.input.setNode = function(node) {\n // not sure..\n state.g.setNode(data.id, {\n   labelType: \"html\",\n   label: html,\n   rx: 5,\n   ry: 5,\n   padding: 0,\n   class: node.status\n });\n state.inner.call(state.render, state.g);\n state.scaleToFit();\n};\n\non.input.setEdge = function(link) {\n  state.g.setEdge(link.source.id, link.target.id, {\n    label: link.source.port + '/' + link.target.port,\n    width: 40\n  });\n  state.inner.call(state.render, state.g);\n  state.scaleToFit();\n};\n\n// todo: api incorrect , will not work..\non.input.removeEdge = function(link) {\n  state.g.removeEdge(link);\n};\n// how to remove by pid or id..\non.input.removeNode = function(node) {\n  state.g.removeNode(node.pid || node.id);\n};\n","provider":"https://serve-chix.rhcloud.com/nodes/{ns}/{name}","title":"Graph"}},"websocket":{"client":{"_id":"533eef893c8d3cd858002db4","name":"client","ns":"websocket","description":"Websocket Client","async":true,"phrases":{"active":"Creating websocket client"},"ports":{"input":{"url":{"type":"string","title":"Url","async":true},"protocol":{"title":"Protocol","type":"string","default":null},"send":{"title":"Send","type":"string","async":true}},"output":{"client":{"type":"WebSocket","title":"WebSocket"},"open":{"type":"any","title":"Open"},"close":{"type":"any","title":"Close"},"message":{"type":"object","title":"Message"},"error":{"type":"Object","title":"Error"}}},"dependencies":{"npm":{"websocket":"1.x.x"}},"fn":"on.input.url = function() {\n\n  state.client = null;\n\n  if(input.protocol) {\n    state.client = new websocket.w3cwebsocket(input.url, input.protocol);\n  } else {\n    state.client = new websocket.w3cwebsocket(input.url);\n  }\n\n  state.client.onmessage = function(event) {\n    output({ message: event.data });\n  };\n\n  state.client.onerror = function(event) {\n    output({ error: event });\n  };\n\n  state.client.onclose = function(event) {\n    output({ close: event });\n  };\n\n  state.client.onopen = function(event) {\n    output({\n      client: state.client,\n      open: event\n    });\n  };\n\n};\n\non.input.send = function(data) {\n  if(state.client && state.client.readyState === state.client.OPEN) {\n    state.client.send(data);\n  } else {\n    // should revoke input && re-queue\n    return false;\n  }\n};\n","provider":"https://serve-chix.rhcloud.com/nodes/{ns}/{name}","title":"WsClient"}},"console":{"log":{"_id":"52645993df5da0102500004e","name":"log","ns":"console","description":"Console log","async":true,"phrases":{"active":"Logging to console"},"ports":{"input":{"msg":{"type":"any","title":"Log message","description":"Logs a message to the console","async":true,"required":true}},"output":{"out":{"type":"any","title":"Log message"}}},"fn":"on.input.msg = function() {\n  console.log(data);\n  output( { out: data });\n}\n","provider":"https://serve-chix.rhcloud.com/nodes/{ns}/{name}","title":"Log"}},"dom":{"querySelector":{"_id":"527299bb30b8af4b8910216b","name":"querySelector","ns":"dom","title":"BodyEl","description":"[Document query selector](https://developer.mozilla.org/en-US/docs/Web/API/document.querySelector)","expose":["document"],"phrases":{"active":"Gathering elements matching criteria: {{input.selector}}"},"ports":{"input":{"element":{"title":"Element","type":"HTMLElement","default":null},"selector":{"title":"Selector","type":"string"}},"output":{"element":{"title":"Element","type":"HTMLElement"},"selection":{"title":"Selection","type":"HTMLElement"},"error":{"title":"Error","type":"Error"}}},"fn":"var el = input.element ? input.element : document;\noutput = {\n  element: el\n};\n\nvar selection = el.querySelector(input.selector);\nif(selection) {\n  output.selection = selection;\n} else {\n  output.error = Error('Selector ' + input.selector + ' did not match');\n}\n","provider":"https://serve-chix.rhcloud.com/nodes/{ns}/{name}"}}}}}